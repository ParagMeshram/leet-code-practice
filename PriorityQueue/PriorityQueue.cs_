using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace PriorityQueue
{
    public class PriorityQueue<T>
    {
        private readonly IComparer<T> comparer;
        private T[] heap;
        public int Count { get; private set; }
        public PriorityQueue() : this(null) { }
        public PriorityQueue(int capacity) : this(capacity, null) { }
        public PriorityQueue(IComparer<T> comparer) : this(16, comparer) { }

        public PriorityQueue(int capacity, IComparer<T> comparer)
        {
            this.comparer = comparer ?? Comparer<T>.Default;
            this.heap = new T[capacity];
        }

        public void Enqueue(T value)
        {
            if (Count >= heap.Length)
                Array.Resize(ref heap, Count * 2);

            heap[Count] = value;
            SiftUp(Count++);
        }

        public T Dequeue()
        {
            var value = this.Peek();

            heap[0] = heap[--Count];

            if (Count > 0)
                SiftDown(0);

            return value;
        }
        public T Peek()
        {
            if (Count == 0) throw new InvalidOperationException("Queue empty");

            return heap[0];
        }

        private void SiftUp(int index)
        {
            var value = heap[index];

            while (HasParent(index) && comparer.Compare(value, Parent(index)) > 0)
            {
                heap[index] = Parent(index);
                index = ParentIndex(index);
            }

            for (var p = index / 2; index > 0 && comparer.Compare(value, heap[p]) > 0; index = p, p /= 2)
                heap[index] = heap[p];

            heap[index] = value;
        }

        private void SiftDown(int index)
        {
            var value = heap[index];

            while (HasLeftChild(index))
            {
                var leftChildIndex = LeftChildIndex(index);

            }

            for (var p = index * 2; p < Count; index = p, p *= 2)
            {
                if (p + 1 < Count && comparer.Compare(heap[p + 1], heap[p]) > 0)
                    p++;

                if (comparer.Compare(value, heap[p]) >= 0)
                    break;

                heap[index] = heap[p];
            }

            heap[index] = value;
        }

        private static int ParentIndex(int index) => (index - 1) / 2;
        private static int LeftChildIndex(int index) => (index * 2) + 1;
        private static int RightChildIndex(int index) => (index * 2) + 2;

        private bool HasLeftChild(int index) => LeftChildIndex(index) <= Count;
        private bool HasRightChild(int index) => RightChildIndex(index) <= Count;
        private static bool HasParent(int index) => ParentIndex(index) >= 0;

        private T Parent(int index) => heap[ParentIndex(index)];
        private T LeftChild(int index) => heap[LeftChildIndex(index)];
        private T RightChild(int index) => heap[RightChildIndex(index)];
    }


    /*
    
    class PriorityQueue<T>
{
    IComparer<T> comparer;
    T[] heap;
    public int Count { get; private set; }
    public PriorityQueue() : this(null) { }
    public PriorityQueue(int capacity) : this(capacity, null) { }
    public PriorityQueue(IComparer<T> comparer) : this(16, comparer) { }
    public PriorityQueue(int capacity, IComparer<T> comparer)
    {
        this.comparer = (comparer == null) ? Comparer<T>.Default : comparer;
        this.heap = new T[capacity];
    }
    public void push(T v)
    {
        if (Count >= heap.Length) Array.Resize(ref heap, Count * 2);
        heap[Count] = v;
        SiftUp(Count++);
    }
    public T pop()
    {
        var v = top();
        heap[0] = heap[--Count];
        if (Count > 0) SiftDown(0);
        return v;
    }
    public T top()
    {
        if (Count > 0) return heap[0];
        throw new InvalidOperationException("优先队列为空");
    }
    void SiftUp(int n)
    {
        var v = heap[n];
        for (var n2 = n / 2; n > 0 && comparer.Compare(v, heap[n2]) > 0; n = n2, n2 /= 2) heap[n] = heap[n2];
        heap[n] = v;
    }
    void SiftDown(int n)
    {
        var v = heap[n];
        for (var n2 = n * 2; n2 < Count; n = n2, n2 *= 2)
        {
            if (n2 + 1 < Count && comparer.Compare(heap[n2 + 1], heap[n2]) > 0) n2++;
            if (comparer.Compare(v, heap[n2]) >= 0) break;
            heap[n] = heap[n2];
        }
        heap[n] = v;
    }
	
	private bool HasLeftChild(int index) => (2 * index) + 1) <= Count;
	private bool HasRightChild(int index) => (2 * index) + 2) <= Count;
	private bool HasParent(int index) => (index - 1) / 2 >= 0;
	
	private T Parent(int index) => heap[(index - 1) / 2];
	private T LeftChild(int index) => (2 * index) + 1;
	private T RightChild(int index) => (2 * index) + 2;
	
}

     */
}
